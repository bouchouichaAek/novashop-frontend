pipeline {
    agent any

    environment {
        KUBECONFIG = "/var/lib/jenkins/.kube/config"
        DOCKER_USERNAME = credentials('DOCKER-USERNAME') // Replace with your Docker Hub username
    }

    stages {
        stage('Test Code') {
            steps {
                script {
                    // Test Code
                    sh "echo 'Running tests...'"
                    // Add your actual test commands here
                    // sh "npm test"
                }
            }
        }
        
        stage('Get Version') {
            steps {
                script {
                    // Get version from package.json (adjust path if needed)
                    def version = sh(script: "node -p \"require('./package.json').version\"", returnStdout: true).trim()
                    env.SERVICE_VERSION = version
                    echo "Application version: ${version}"
                }
            }
        }
        
        stage('Build and Push Docker Image') {
            steps {
                script {
                    // Build & Push Docker Image
                    withCredentials([usernamePassword(credentialsId: 'DOCKER', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                            docker build -t $DOCKER_USERNAME/novashop-frontend:v${SERVICE_VERSION} .
                            docker push $DOCKER_USERNAME/novashop-frontend:v${SERVICE_VERSION}
                        '''
                    }
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    sh '''
                        kubectl set image deployment/novashop-frontend novashop-frontend=$DOCKER_USERNAME/novashop-frontend:v${SERVICE_VERSION} --record
                        kubectl rollout status deployment/novashop-frontend || kubectl rollout undo deployment/novashop-frontend
                    '''
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}